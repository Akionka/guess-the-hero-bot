package main

import (
    "strconv"

	"github.com/akionka/akionkabot/data"
)

templ questionTempl(mmr int, items []data.Item) {
    <b><i>–£–ì–ê–î–ê–ô –ì–ï–†–û–Ø</i></b> @nl()
    @nl()
    –ù–∞ –∫–∞–∫–æ–≥–æ –≥–µ—Ä–æ—è –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã?
    @nl()
    –°—Ä–µ–¥–Ω–∏–π MMR –∏–≥—Ä—ã ‚Äî <b>{ strconv.Itoa(mmr) }</b>.
    @nl()
    @nl()
    <b>–ü—Ä–µ–¥–º–µ—Ç—ã:</b>
    @nl()
    for _, item := range items {
    ‚Äî <i>{ item.DisplayName }</i>@nl()
    }
}

templ answerTempl(guessedHero, correctHero data.Hero, pos data.Position, isWon bool) {
    <b>
    –ü–æ–∑–∏—Ü–∏—è: <i>{ pos.String() } { pos.ToEmoji() }</i> @nl()
    –†–µ–∑—É–ª—å—Ç–∞—Ç: <i>
    if isWon {
        –ü–æ–±–µ–¥–∞ üèÜ
    } else {
        –ü–æ—Ä–∞–∂–µ–Ω–∏–µ ü•Ä
    }
    </i>@nl()
    –í–∞—à –æ—Ç–≤–µ—Ç: <i>{ guessedHero.DisplayName }</i> @nl()
    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <i>{ correctHero.DisplayName }
    if guessedHero == correctHero {
        ‚úÖ
    } else {
        ‚ùå
    } </i>
    </b>@nl()
}

templ matchCredentials(heroName string, matchID int64, playerID int64, playerProName string) {
    <b>
    <a href={ templ.URL("https://dota2protracker.com/hero/"+heroName) } >–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ—Ä–æ—è (D2PT)</a> @nl()
    <a href={ templ.URL("https://stratz.com/matches/"+strconv.FormatInt(matchID, 10)) }>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Ç—á–∞ (Stratz)</a> @nl()
    <a href={ templ.URL("https://stratz.com/players/"+strconv.FormatInt(playerID, 10)) }>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä–æ–∫–∞ (Stratz)</a> @nl()
    if len(playerProName) > 0 {
        <a href={ templ.URL("https://dota2protracker.com/player/"+playerProName) }>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ-–∏–≥—Ä–æ–∫–∞ (D2PT)</a> @nl()
    }
    </b> @nl()
}

templ nl() {
    @templ.Raw("\n")
}